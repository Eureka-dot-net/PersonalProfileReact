// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Domain.AboutMe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GitHub")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkedIn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AboutMe");
                });

            modelBuilder.Entity("Domain.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Highlights")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("Domain.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SkillCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SkillCategoryId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Domain.SkillCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SkillCategories");
                });

            modelBuilder.Entity("Domain.AboutMe", b =>
                {
                    b.OwnsOne("Domain.LocalizedString", "Bio", b1 =>
                        {
                            b1.Property<int>("AboutMeId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("En")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("He")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("AboutMeId");

                            b1.ToTable("AboutMe");

                            b1.WithOwner()
                                .HasForeignKey("AboutMeId");
                        });

                    b.OwnsOne("Domain.LocalizedString", "FullName", b1 =>
                        {
                            b1.Property<int>("AboutMeId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("En")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("He")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("AboutMeId");

                            b1.ToTable("AboutMe");

                            b1.WithOwner()
                                .HasForeignKey("AboutMeId");
                        });

                    b.OwnsOne("Domain.LocalizedString", "Location", b1 =>
                        {
                            b1.Property<int>("AboutMeId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("En")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("He")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("AboutMeId");

                            b1.ToTable("AboutMe");

                            b1.WithOwner()
                                .HasForeignKey("AboutMeId");
                        });

                    b.Navigation("Bio")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Skill", b =>
                {
                    b.HasOne("Domain.SkillCategory", "SkillCategory")
                        .WithMany("Skills")
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("Domain.SkillCategory", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
